from store.models import Product

class Cart():
    def __init__(self,request):
        self.session = request.session

        # Get the current session key if it exists
        cart = self.session.get('session_key')

        # If the user is new, no session key!  Create one!
        if 'session_key' not in request.session:
            cart = self.session['session_key'] = {}

        # Make sure cart is available on all pages of site
        self.cart = cart

    def add(self,product,quantity):
        product_id = str(product.id)
        product_Qty =str(quantity)
        #logic
        if product_id in self.cart:
            pass
        else:
            
            #self.cart[product_id] = {'price':str(product.price)}
            self.cart[product_id] = int(product_Qty)
        
        self.session.modified = True

    def cart_total(self):
        # Get products ID'S
        product_ids = self.cart.keys()
        # lookup those keys in our products database model
        products = Product.objects.filter(id__in=product_ids)
        # Get quantities
        quantities =  self.cart
        # Start counting at 0
        total = 0
        for key, value in quantities.items():
            key = int(key)
            for product in products:
                if  product.id == key:
                    if product.is_sale:
                        total += product.sale_price * value 
                    else:
                        total += product.price * value
        return total




    def __len__(self):
        return len(self.cart)
    

    def get_prods(self):
        # Get ids from cart
        product_ids = self.cart.keys()
        # Use ids to laptop products in database model
        products = Product.objects.filter(id__in=product_ids)
        # Return products
        return products
    
    def get_quants(self):
        quantities = self.cart
        return quantities
    
    def update(self, product, quantity):
        product_id = str(product)
        product_Qty = int(quantity)

        # Get the cart
        ourcart =self.cart
        # Update Dictonary/cart
        ourcart[product_id] = product_Qty

        self.session.modified = True

        thing = self.cart 
        return thing
    
    def delete(self, product):
        product_id = str(product)
        # Delet form dictonary/cart
        if  product_id in self.cart:
            del self.cart[product_id]
        
        self.session.modified = True







""""The session ID is automatically generated by Django, but the Cart class is not for generating the session itself. Instead, it is used to manage the shopping cart data that you want to store inside the session. Here's why you still need the Cart class:

Why You Define the Cart Class:
Managing Cart Data:

The Cart class is designed to handle all the operations related to the user's shopping cart (adding items, removing items, etc.).
You need a way to organize and access the cart data, and that's what the Cart class does.
Storing Cart in Session:

The session itself is just a storage space. You can store anything in the session (like user preferences, authentication info, or a shopping cart).
The Cart class helps you store and retrieve the shopping cart data inside the session using the key 'session_key'.
Accessing and Updating the Cart:

The Cart class also ensures that you can easily access the cart data from the session and update it (add products, remove products, etc.) when needed.
Without the Cart class, you'd need to manually handle adding/removing items and managing the cart data inside the session, which can get messy.
How They Work Together:
Session: Automatically created by Django to store data for each user (like a shopping cart).
Cart Class: Defines how to manage the shopping cart (how to add/remove products, how to retrieve it from the session, etc.).
Example in Your Code:
Django creates the session automatically when the user visits your site.
Your Cart class defines how the shopping cart should behave. It checks if the user has a cart in their session, and if not, it creates a new empty one."""
        
